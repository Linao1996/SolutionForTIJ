package pac1;//: concurrency/ToastOMatic.java
// A toaster that uses queues.

import java.util.concurrent.*;
import java.util.*;

class Toast {
    public enum Status {DRY, BUTTERED, JELLY}

    private Status status = Status.DRY;
    private final int id;

    public Toast(int idn) {
        id = idn;
    }

    public void butter() {
        status = Status.BUTTERED;
    }

    public void jelly() {
        status = Status.JELLY;
    }

    ;

    public Status getStatus() {
        return status;
    }

    public int getId() {
        return id;
    }

    public String toString() {
        return "Toast " + id + ": " + status;
    }
}

class ToastQueue extends LinkedBlockingQueue<Toast> {
}

class Toaster implements Runnable {
    private ToastQueue toastQueue;
    private int count = 0;
    private Random rand = new Random(47);

    public Toaster(ToastQueue tq) {
        toastQueue = tq;
    }

    public void run() {
        try {
            while (!Thread.interrupted()) {
                TimeUnit.MILLISECONDS.sleep(
                        100 + rand.nextInt(500));
                // Make toast
                Toast t = new Toast(count++);
                System.out.println(t);
                // Insert into queue
                toastQueue.put(t);
            }
        } catch (InterruptedException e) {
            System.out.println("Toaster interrupted");
        }
        System.out.println("Toaster off");
    }
}

// Apply butter to toast:
class Butterer implements Runnable {
    private ToastQueue dryQueue, butteredQueue;

    public Butterer(ToastQueue dry, ToastQueue buttered) {
        dryQueue = dry;
        butteredQueue = buttered;
    }

    public void run() {
        try {
            while (!Thread.interrupted()) {
                // Blocks until next piece of toast is available:
                Toast t = dryQueue.take();
                t.butter();
                System.out.println(t);
                butteredQueue.put(t);
            }
        } catch (InterruptedException e) {
            System.out.println("Butterer interrupted");
        }
        System.out.println("Butterer off");
    }
}


class Jelly implements Runnable {
    private ToastQueue dryQueue, jellyQueue;

    public Jelly(ToastQueue dryQueue, ToastQueue jellyQueue) {
        this.dryQueue = dryQueue;
        this.jellyQueue = jellyQueue;
    }

    public void run() {
        try {
            while (!Thread.interrupted()) {
                Toast t = dryQueue.take();
                t.jelly();
                jellyQueue.add(t);
            }
        } catch (InterruptedException e) {
        }
        System.out.println("Jelly off");
    }
}

class Sandwich {
    private Toast top, bottom;

    public Sandwich(Toast top, Toast bottom) {
        this.top = top;
        this.bottom = bottom;
    }

    public String toString() {
        return top + " " + bottom + "  Sandwich";
    }
}

class SandwichQueue extends LinkedBlockingQueue<Sandwich> {

}

class ToastSandwich implements Runnable {
    private ToastQueue butteredQueue, jelliedQueue;
    private SandwichQueue sandwichQueue;

    public ToastSandwich(ToastQueue butteredQueue, ToastQueue jelliedQueue, SandwichQueue sandwichQueue) {
        this.butteredQueue = butteredQueue;
        this.jelliedQueue = jelliedQueue;
        this.sandwichQueue = sandwichQueue;
    }

    @Override
    public void run() {
        try {
            while (!Thread.interrupted()) {
                Toast butteredToast = butteredQueue.take();
                Toast jelliedToast = jelliedQueue.take();
                sandwichQueue.add(new Sandwich(butteredToast, jelliedToast));
            }
        } catch (InterruptedException e) {
            System.out.println("ToasSandwich Interrupted!");
        }
        System.out.println("ToastSandWich off");
    }

}

// Consume the toast:
class Eater implements Runnable {
    private SandwichQueue finishedQueue;
    private int counter = 0;

    public Eater(SandwichQueue finished) {
        finishedQueue = finished;
    }

    public void run() {
        try {
            while (!Thread.interrupted()) {
                Sandwich t = finishedQueue.take();
                // Verify that the toast is coming in order,
                // and that all pieces are getting jammed:
//                if(t.getId() != counter++ ||
//                        t.getStatus() != Toast.Status.JAMMED) {
//                    System.out.println(">>>> Error: " + t);
//                    System.exit(1);
//                } else
                System.out.println("Chomp! " + t);
            }
        } catch (InterruptedException e) {
            System.out.println("Eater interrupted");
        }
        System.out.println("Eater off");
    }
}

public class ToastOMatic {
    public static void main(String[] args) throws Exception {
        ToastQueue dryQueue = new ToastQueue(),
                butteredQueue = new ToastQueue(),
                jellyQueue = new ToastQueue();
        SandwichQueue finishedQueue = new SandwichQueue();
        ExecutorService exec = Executors.newCachedThreadPool();
        exec.execute(new Toaster(dryQueue));
        exec.execute(new Butterer(dryQueue, butteredQueue));
        exec.execute(new Jelly(dryQueue, jellyQueue));
        exec.execute(new ToastSandwich(butteredQueue, jellyQueue, finishedQueue));
        exec.execute(new Eater(finishedQueue));
        TimeUnit.SECONDS.sleep(5);
        exec.shutdownNow();
    }
}
