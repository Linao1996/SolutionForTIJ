package pac1;

import kotlin.jvm.Synchronized;
import org.omg.Messaging.SYNC_WITH_TRANSPORT;

import java.util.*;
import java.util.concurrent.*;

class A implements Runnable {



    @Override
    public void run() {
        System.out.println("A is going to wait");
        synchronized (this){
            try {
                wait();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        System.out.println("Enough waiting! ");
    }
}

class B implements Runnable {
    A a = new A();

    B(A a) {
        this.a = a;
    }



    @Override
    public void run() {
        try {
            TimeUnit.SECONDS.sleep(2);
            System.out.println("B is going to notify");
            synchronized (a){
                a.notifyAll();
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

    }
}

public class Ex21 {
    public static void main(String[] args) {
        ExecutorService exec = Executors.newCachedThreadPool();
        A a = new A();
        exec.execute(a);
        exec.execute(new B(a));
    }

}
